---
volumes:

  project-root-volume:
    driver: local
    driver_opts:
      type: none
      device: .
      o: bind

services:

  cleanup:
    container_name: ${COMPOSE_PROJECT_NAME}-cleanup
    image: &linux-image alpine:latest
    volumes: &volumes
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - project-root-volume:/workspaces/configs-homelab
    working_dir: &default-workdir /workspaces/configs-homelab
    command:
      - /bin/ash
      - -c
      - |
        rm -rf target
    tty: &tty true

  lint-yaml:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-yaml
    image: cytopia/yamllint:latest
    volumes: *volumes
    working_dir: *default-workdir
    command: .
    tty: *tty

  lint-workflows:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-workflows
    image: rhysd/actionlint:latest
    volumes: *volumes
    working_dir: *default-workdir
    command: -color
    tty: *tty

  lint-filenames:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-filenames
    image: lslintorg/ls-lint:1.11.2
    volumes: *volumes
    working_dir: *default-workdir
    tty: *tty

  lint-folders:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-folders
    image: sommerfeldio/folderslint:latest
    volumes: *volumes
    working_dir: *default-workdir
    command: .
    tty: *tty

  lint-markdown-links:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-markdown-links
    image: lycheeverse/lychee:sha-a11d515-alpine
    volumes: *volumes
    working_dir: *default-workdir
    command: --config .lychee.toml .
    tty: *tty

  lint-ansible:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-ansible
    image: pipelinecomponents/ansible-lint:0.76.0
    volumes: *volumes
    working_dir: *default-workdir
    command: ansible-lint components/ansible/playbooks -c .ansible-lint.yml
    tty: *tty

  lint-helm:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-helm
    image: alpine/helm:3.16.1
    volumes: *volumes
    working_dir: *default-workdir
    command: lint components/helm-charts/hello-world-nginx # --with-subcharts
    tty: *tty

  lint-k8s-manifests:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-k8s-manifests
    image: golang:1.23.5-alpine3.21
    volumes: *volumes
    working_dir: *default-workdir
    command:
      - /bin/ash
      - -c
      - |
        echo "[INFO] ----- Install ----------------------------"
        go install golang.stackrox.io/kube-linter/cmd/kube-linter@v0.6.8

        echo "[INFO] ----- Lint -------------------------------"
        kube-linter lint components/talos-cluster/manifests --with-color --config .kube-linter.yml
    tty: *tty

  kroki:
    container_name: ${COMPOSE_PROJECT_NAME}-kroki
    image: yuzutech/kroki:0.26.0
    ports:
      - 8000:8000
    tty: *tty

  docs-build:
    container_name: ${COMPOSE_PROJECT_NAME}-docs-build
    image: &docs-image sommerfeldio/mkdocs:latest
    volumes: *volumes
    working_dir: *default-workdir
    command: build
    tty: *tty
    depends_on:
      cleanup:
        condition: service_completed_successfully

  docs-dev-server:
    container_name: ${COMPOSE_PROJECT_NAME}-docs-dev-server
    image: *docs-image
    environment:
      - KROKI_SERVER_URL=http://localhost:8000
    volumes: *volumes
    working_dir: *default-workdir
    ports:
      - 3080:8000
    tty: *tty
    depends_on:
      cleanup:
        condition: service_completed_successfully
      kroki:
        condition: service_started
