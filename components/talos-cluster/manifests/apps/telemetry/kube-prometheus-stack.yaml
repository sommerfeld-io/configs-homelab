---
# https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  name: kube-prometheus-stack
  namespace: argocd
spec:
  project: talos-cluster
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: 69.2.0
    helm:
      valuesObject:
        namespaceOverride: &namespace telemetry
        prometheus:
          # extend ClusterRole to allow monitoring of components in other namespaces
          additionalRulesForClusterRole:
            - apiGroups: [""]
              resources:
                - "nodes"
                - "nodes/proxy"
                - "services"
                - "endpoints"
                - "pods"
              verbs: ["get", "list", "watch"]
            - apiGroups:
                - "monitoring.coreos.com"
              resources:
                - "servicemonitors"
                - "podmonitors"
                - "probes"
                - "rules"
              verbs: ["get", "list", "watch"]
        grafana:
          namespaceOverride: *namespace
          adminUser: admin
          adminPassword: admin
        kube-state-metrics:
          namespaceOverride: *namespace
        prometheus-node-exporter:
          namespaceOverride: *namespace
        sidecar:
          dashboards:
            enabled: true
            searchNamespace: *namespace
  destination:
    server: https://kubernetes.default.svc
    namespace: *namespace
  syncPolicy:
    managedNamespaceMetadata:
      labels:
        pod-security.kubernetes.io/enforce: privileged
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: kube-prometheus-stack
    app.kubernetes.io/name: grafana
  name: kube-prometheus-stack-grafana-nodeport
  namespace: telemetry
spec:
  ports:
    - name: http-web
      port: 80
      protocol: TCP
      targetPort: 3000
      nodePort: 30000
  selector:
    app.kubernetes.io/instance: kube-prometheus-stack
    app.kubernetes.io/name: grafana
  sessionAffinity: None
  type: NodePort
