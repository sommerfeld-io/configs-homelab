---
## This `portainer` Docker stack starts a link:https://github.com/portainer/portainer[Portainer CE]
## instance. This link:https://docs.portainer.io[Portainer] instance is pre-configured with an
## admin user and handles deployments of other Docker stacks through GitOps techniques.
##
## [cols="2,1,3", options="header"]
## |===
## |Component     |Port |URL
## |Portainer     |9990 |http://localhost:9990
## |===
##
## == How to manage Docker stacks
## In addition to Portainer, a `postman/newman` container is started to initialize portainer with
## all relevant settings. This container runs a Postman collection that sets up all Docker stacks
## (among other things) and runs some tests on the portainer instance. This container is terminated
## after the collecetion run ended.
##
## To add a new Docker stack, simple create a `docker-compose.yml` file in the respective repository
## (the repo of the application) and add a new webservice call to the Postman collection (see
## `components/homelab/src/main/docker-stacks/portainer/assets/collections/portainer-postman-collection.json`).
##
## To update an exsisting Docker stack, simply update the `docker-compose.yml` and Portainer will
## stop, pull and start the respective Docker stack automatically. To do this, Portainer checks the
## `docker-compose.yml` files in a fixed interval. When the `docker-compose.yml` was updated,
## Protainer updates the containers as well. The interval is defined in the respective webservidce in
## the Postman collection.
##
## See https://app.swaggerhub.com/apis/portainer/portainer-ce/2.19.4#/ and https://docs.portainer.io/api/access
## for Portainer API docs.

services:

  portainer:
    image: portainer/portainer-ce:2.20.3-alpine
    container_name: portainer
    command: --host unix:///var/run/docker.sock --admin-password-file /tmp/portainer_passwords
    restart: always
    ports:
      - 9990:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
      - ./assets/portainer.passwd:/tmp/portainer_passwords
      - /etc/timezone:/etc/timezone:ro
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:9000 || exit 1"
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 10s

volumes:
  portainer_data:
