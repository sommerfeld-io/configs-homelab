---
# The task installs Minikube and Helm and all dependencies expect for the
# virtualization provider. Minikube automatically selects the virtualization provider based on the
# host system. Since `ubuntu-minikube.yml` took care of installing docker, there is a
# virtualization provider available. Just make sure Docker is installed before starting minikube.

# ! Remove Minikube before installing a new version
- name: Minikube Setup  ----  Purge minikube
  ansible.builtin.apt:
    name: minikube
    state: absent
    purge: true

# ! Remove Minikube binary before installing a new version
- name: Minikube Setup  ----  Purge minikube (delete binary)
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /usr/local/bin/minikube
    - /usr/local/bin/helm

# - name: Minikube Setup  ----  Download
#   ansible.builtin.get_url:
#     # url: https://storage.googleapis.com/minikube/releases/latest/minikube_latest_{{ architecture }}.deb
#     url: "https://github.com/kubernetes/minikube/releases/download/v{{ version }}/minikube_{{ version }}-0_{{ architecture }}.deb"
#     dest: /tmp/minikube_{{ architecture }}.deb
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"
#     mode: u=rwx,g=rx,o=rx
#   vars:
#     version: 1.34.0

# - name: Minikube Setup  ----  Install Minikube
#   ansible.builtin.apt:
#     deb: /tmp/minikube_{{ architecture }}.deb
#     state: present

# - name: Minikube Setup  ----  Verify installation
#   ansible.builtin.command: minikube version
#   register: minikube_output

# - name: Minikube Setup  ----  Print version
#   ansible.builtin.debug:
#     msg: "{{ minikube_output.stdout }}"

# - name: Helm Setup  ----  Download
#   ansible.builtin.get_url:
#     url: "https://get.helm.sh/helm-v{{ version }}-linux-{{ architecture }}.tar.gz"
#     dest: /tmp/helm-linux-{{ architecture }}.tar.gz
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"
#     mode: u=rwx,g=rx,o=rx
#   vars:
#     version: 3.15.2

# - name: Helm Setup  ----  Extract tarball
#   ansible.builtin.unarchive:
#     src: /tmp/helm-linux-{{ architecture }}.tar.gz
#     dest: /tmp
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"
#     remote_src: true
#     # extra_opts: [--strip-components=1]

# - name: Helm Setup  ----  Move to /usr/local/bin
#   ansible.builtin.command: mv /tmp/linux-{{ architecture }}/helm /usr/local/bin/helm
#   args:
#     creates: /usr/local/bin/helm

# - name: Helm Setup  ----  Verify installation
#   ansible.builtin.command: helm version
#   register: helm_output

# - name: Helm Setup  ----  Print version
#   ansible.builtin.debug:
#     msg: "{{ helm_output.stdout }}"
