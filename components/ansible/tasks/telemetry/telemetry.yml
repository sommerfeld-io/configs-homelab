---
- name: Config  ----  Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: u=rwx,g=rx,o=rx
  with_items:
    - "{{ dot_repos_dir }}"

- name: Telemetry  ----  Docker  ----  Check if docker-compose.yml file exists
  stat:
    path: "{{ stack_telemetry }}/docker-compose.yml"
  register: compose_file

- name: Telemetry  ----  Docker  ----  Tear down existing services
  community.docker.docker_compose_v2:
    project_src: "{{ stack_telemetry }}"
    state: absent
    remove_orphans: true
    remove_volumes: false
  when: compose_file.stat.exists

- name: Telemetry  ----  Clone repos (and pull updates if already exists)
  ansible.builtin.git:
    repo: "{{ github }}:{{ item.org }}/{{ item.repo }}.git"
    dest: "{{ item.dest }}/{{ item.repo }}"
    clone: true
    update: true
    key_file: "/home/{{ ansible_user }}/.ssh/id_rsa"
    accept_hostkey: true
  with_items:
    - { dest: "{{ dot_repos_dir }}", org: "sommerfeld-io", repo: "telemetry" }

- name: Telemetry  ----  Docker  ----  Create and start services
  community.docker.docker_compose_v2:
    project_src: "{{ stack_telemetry }}"
    wait: true
    wait_timeout: 60 # seconds
  register: output

- name: Telemetry  ----  Docker  ----  Verify that services are running
  ansible.builtin.assert:
    that:
      - prometheus_container.State == 'running'
      - grafana_container.State == 'running'
      - blackbox_exporter_container.State == 'running'
  vars:
    prometheus_container: >-
      {{ output.containers | selectattr("Service", "equalto", "prometheus") | first }}
    grafana_container: >-
      {{ output.containers | selectattr("Service", "equalto", "grafana") | first }}
    blackbox_exporter_container: >-
      {{ output.containers | selectattr("Service", "equalto", "blackbox_exporter") | first }}
