---
version: '3.42.1'

dotenv: ['.env']

vars:
  INSPEC_DIR: tests/inspec
  REPO: https://raw.githubusercontent.com/sommerfeld-io/.github

includes:
  common: https://raw.githubusercontent.com/sommerfeld-io/.github/refs/heads/main/assets/task/common.yml

tasks:

  sync:assets-from-github:
    desc: 'Sync assets from the central sommerfeldio/.github repository'
    cmds:
      - echo "Syncing assets from the central sommerfeldio/.github repository..."
      - task: common:download
        vars: { DEST: ".github/copilot-instructions.md", URL: "{{ .REPO }}/refs/heads/main/.github/copilot-instructions.md" }
      - task: common:download
        vars: { DEST: ".github/workflows/codeql.yml", URL: "{{ .REPO }}/refs/heads/main/.github/workflows/codeql.yml" }
      - task: common:download
        vars: { DEST: ".github/workflows/housekeeping-issues.yml", URL: "{{ .REPO }}/refs/heads/main/.github/workflows/housekeeping-issues.yml" }
      - task: common:download
        vars: { DEST: ".github/workflows/housekeeping-labels.yml", URL: "{{ .REPO }}/refs/heads/main/.github/workflows/housekeeping-labels.yml" }

  # ===============================================================================================

  cleanup:
    desc: Cleanup the development environment for this project
    cmds:
      - docker compose down --remove-orphans
      - rm -rf .cache
      - rm -rf node_modules
      - rm -rf target
      - for: &inspec-profiles ['ansible-baseline', 'talos-baseline']
        cmd: |
          sudo rm -rf tests/inspec/{{ .ITEM }}/vendor
          sudo rm -rf tests/inspec/{{ .ITEM }}/inspec.lock
      - find . -type f -exec chmod +r {} +

  # ===============================================================================================

  lint:
    desc: Run all project linters (except Dockerfile linters)
    cmds:
      - for: ['yaml', 'workflows', 'filenames', 'folders', 'markdown-links', 'ansible', 'helm', 'k8s-manifests']
        cmd: docker compose up lint-{{ .ITEM }} --exit-code-from lint-{{ .ITEM }}

  # ===============================================================================================

  internal:docs:generate:from-readme:
    desc: 'Collecting documentation from helm charts and generate diagrams'
    internal: true
    vars:
      FOLDERS:
        sh: find {{ .BASEPATH }} -maxdepth 1 -type d -not -path '{{ .BASEPATH }}' -exec basename {} \;
    cmds:
      - rm -rf docs/{{ .TARGET_PATH }}
      - mkdir -p docs/{{ .TARGET_PATH }}
      - echo "Contents of this folder are auto-generated" > docs/{{ .TARGET_PATH }}/.auto-generated
      - for: { var: FOLDERS }
        task: common:copy
        vars: { SRC: "{{ .BASEPATH }}/{{ .ITEM }}/README.md", DEST: "docs/{{ .TARGET_PATH }}/{{ .ITEM }}.md" }
    generates:
      - "docs/{{ .TARGET_PATH }}/{{ .ITEM }}.md"

  docs:generate:
    desc: 'Generate Markdown files for documentation'
    cmds:
      - echo "Collecting documentation from other Markdown files ..."
      - task: common:copy
        vars: { SRC: docs/index.md, DEST: README.md }
      - task: common:copy
        vars: { SRC: docs/license.md, DEST: LICENSE.md }
      - task: internal:docs:generate:from-readme
        vars: { BASEPATH: components/ansible/assets/docker-stacks, TARGET_PATH: api-docs/docker-stacks, TITLE: 'Docker Stacks' }
      - task: internal:docs:generate:from-readme
        vars: { BASEPATH: components/talos-cluster/manifests/apps, TARGET_PATH: api-docs/manifests/apps, TITLE: 'Apps in Talos' }
      - task: internal:docs:generate:from-readme
        vars: { BASEPATH: components/talos-cluster/helm-charts, TARGET_PATH: api-docs/helm-charts, TITLE: 'Helm Charts' }

  docs:run:
    desc: Run the documentation server
    cmds:
      - task: docs:generate
      - docker compose up docs-dev-server

  # ===============================================================================================

  ansible:cleanup:
    vars:
      PLAYBOOK: cleanup.yml
    desc: &ansible-desc HOST ONLY | Run Ansible playbook | {{ .PLAYBOOK }}
    dir: &ansible-dir components/ansible
    preconditions: &kobol-or-caprica
      - sh: '[ "$(hostname)" = "kobol" ] || [ "$(hostname)" = "caprica" ]'
        msg: "[ERROR] This task can only be run on host 'kobol' or 'caprica'."
    cmds: &ansible-cmd
      - ansible-playbook "playbooks/{{ .PLAYBOOK }}" --inventory hosts.yml --ask-become-pass

  ansible:raspi:
    vars:
      PLAYBOOK: raspi.yml
    desc: *ansible-desc
    dir: *ansible-dir
    preconditions: *kobol-or-caprica
    cmds: *ansible-cmd

  ansible:ubuntu:desktop:
    vars:
      PLAYBOOK: ubuntu-desktop.yml
    desc: *ansible-desc
    dir: *ansible-dir
    preconditions: *kobol-or-caprica
    cmds: *ansible-cmd

  ansible:ubuntu:desktop:steam:
    vars:
      PLAYBOOK: ubuntu-desktop-steam.yml
    desc: *ansible-desc
    dir: *ansible-dir
    preconditions: *kobol-or-caprica
    cmds: *ansible-cmd

  ansible:repositories:
    vars:
      PLAYBOOK: repositories.yml
    desc: *ansible-desc
    dir: *ansible-dir
    preconditions: *kobol-or-caprica
    cmds: *ansible-cmd

  # ===============================================================================================

  inspec:check:
    desc: &inspec-check-desc Vendor and check InSpec profile validity
    cmds:
      - for: *inspec-profiles
        task: inspec:check:{{ .ITEM }}

  inspec:check:*:
    desc: *inspec-check-desc
    vars:
      PROFILE: '{{ index .MATCH 0 }}'
    cmds:
      - rm -f "{{ .INSPEC_DIR }}/{{ .PROFILE }}/inspec.lock"
      - docker compose run --rm inspec vendor "{{ .INSPEC_DIR }}/{{ .PROFILE }}" --overwrite --chef-license=accept
      - docker compose run --rm inspec check "{{ .INSPEC_DIR }}/{{ .PROFILE }}" --chef-license=accept

  inspec:ansible-baseline:
    desc: HOST ONLY | Run InSpec against all nodes
    deps:
      - task: inspec:check
    preconditions: *kobol-or-caprica
    cmds:
      - for: ['caprica.fritz.box', 'kobol.fritz.box']
        task: inspec:ansible-baseline:{{ .ITEM }}

  inspec:ansible-baseline:*:
    desc: HOST ONLY | Run InSpec against single node (* = FQDN)
    vars:
      HOST: '{{ index .MATCH 0 }}'
      USER: sebastian
      PROFILE: ansible-baseline
    preconditions: *kobol-or-caprica
    cmds:
      - docker compose run --rm --env SSH_AUTH_SOCK=/ssh-auth.sock -v "$SSH_AUTH_SOCK:/ssh-auth.sock" inspec exec "{{ .INSPEC_DIR }}/{{ .PROFILE }}" --target "ssh://{{ .USER }}@{{ .HOST }}" --no-distinct-exit --chef-license=accept

  inspec:talos-baseline:
    desc: HOST ONLY | Run InSpec against Talos cluster
    vars:
      PROFILE: talos-baseline
    preconditions: *kobol-or-caprica
    cmds:
      - docker compose run --rm inspec exec "{{ .INSPEC_DIR }}/{{ .PROFILE }}" --no-distinct-exit --chef-license=accept

  # ===============================================================================================

  virtual-talos-admin:start:
    desc: HOST ONLY | Startup the Talos Administration Vagrantbox'
    dir: &talos-vm-dir components/talos-cluster/virtual-talos-admin
    preconditions: *kobol-or-caprica
    cmds:
      - vagrant validate
      - vagrant up
      - vagrant ssh

  virtual-talos-admin:stop:
    desc: HOST ONLY | Shutdown the Talos Administration Vagrantbox
    dir: *talos-vm-dir
    preconditions: *kobol-or-caprica
    cmds:
      - vagrant halt

  virtual-talos-admin:ssh:
    desc: HOST ONLY | SSH into the Talos Administration Vagrantbox
    dir: *talos-vm-dir
    preconditions: *kobol-or-caprica
    cmds:
      - vagrant ssh

  virtual-talos-admin:remove:
    desc: HOST ONLY | Remove the Talos Administration Vagrantbox
    dir: *talos-vm-dir
    preconditions: *kobol-or-caprica
    cmds:
      - vagrant halt
      - vagrant destroy --force
